/* BMP085 Extended Example Code
  by: Jim Lindblom
  SparkFun Electronics
  date: 1/18/11
  license: CC BY-SA v3.0 - http://creativecommons.org/licenses/by-sa/3.0/
  
  Get pressure and temperature from the BMP085 and calculate altitude.
  Serial.print it out at 9600 baud to serial monitor.

  Update (7/19/11): I've heard folks may be encountering issues
  with this code, who're running an Arduino at 8MHz. If you're 
  using an Arduino Pro 3.3V/8MHz, or the like, you may need to 
  increase some of the delays in the bmp085ReadUP and 
  bmp085ReadUT functions.
*/

#include <Wire.h>

#define BMP085_ADDRESS 0x77  // I2C address of BMP085

const unsigned char OSS = 0;  // Oversampling Setting

// Calibration values
float ac1;
float ac2; 
float ac3; 
unsigned long ac4;
unsigned long ac5;
unsigned long ac6;
float b1; 
float b2;
float mb;
float mc;
float md;

// b5 is calculated in bmp085GetTemperature(...), this variable is also used in bmp085GetPressure(...)
// so ...Temperature(...) must be called before ...Pressure(...).
long b5; 

float temperature;
float pressure;

const float p0 = 101325;     // Pressure at sea level (Pa)
float altitude;
boolean isReadPressure = false;
float rawPressureSum = 0;
byte rawPressureSumCount = 0;
byte pressureCount = 0;
unsigned long rawPressure = 0;
long rawTemperature = 0;
float baroRawAltitude   = 0.0;
float pressureFactor = 1/5.255;
float baroAltitude      = 0.0; 
float baroGroundAltitude = 0.0;
float baroSmoothFactor   = 0.025;
unsigned long timer = 0;
float c3,c4,c5,c6;
float b01;
float x0,x1,x2,y0,y1,y2,x,y,z;
float p00,p01,p02;
float Mc,Md,tempdiff;


void initializeBaro() {
//delay(7000);
  pressure=0;
  baroGroundAltitude = 0.0;
  pressureFactor = 1/5.255;
  
  ac1 = bmp085ReadInt(0xAA);
  ac2 = bmp085ReadInt(0xAC);
  ac3 = bmp085ReadInt(0xAE);
  ac4 = bmp085ReadInt(0xB0);
  ac4 = 34206;
  ac5 = bmp085ReadInt(0xB2);
  ac6 = bmp085ReadInt(0xB4);
  b1 = bmp085ReadInt(0xB6);
  b2 = bmp085ReadInt(0xB8);
  mb = bmp085ReadInt(0xBA);
  mc = bmp085ReadInt(0xBC);
  md = bmp085ReadInt(0xBE);
  
  // Calculation for floating point baro
  c3 = 160*pow(2,-15)*ac3;
  c4 = 0.001*pow(2,-15)*ac4;
  b01 = 160*160*pow(2,-30)*b1;
  
  x0 = ac1;
  x1 = 160*pow(2,-13)*ac2;
  x2 = 160*160*pow(2,-25)*b2;
  
  y0 = c4*pow(2,15);
  y1 = c4*c3;
  y2 = c4*b01;
  
  p00 = (3791-8)/1600;
  p01 = 1-7357*pow(2,-20);
  p02 = 3038*100*pow(2,-36);
  
  

 // Serial.print("b1 -");Serial.print(b1);Serial.print("  b2 -");Serial.println(b2);
  isReadPressure = false;
  pressureCount = 0;
  measureBaro();
  delay(5); // delay for temperature
  measureBaro();
  delay(10); // delay for pressure
  measureGroundBaro();
  // check if measured ground altitude is valid
  while (abs(baroRawAltitude - baroGroundAltitude) > 0.25) {
    delay(26);
    measureGroundBaro();
  }
  baroAltitude = baroGroundAltitude;
 // Serial.print("Intializing Done");
}
// Stores all of the bmp085's calibration values into global variables
// Calibration values are required to calculate temp and pressure
// This function should be called at the beginning of the program
/*void bmp085Calibration()
{
  
  ac1 = bmp085ReadInt(0xAA);
  ac2 = bmp085ReadInt(0xAC);
  ac3 = bmp085ReadInt(0xAE);
  ac4 = bmp085ReadInt(0xB0);
  ac5 = bmp085ReadInt(0xB2);
  ac6 = bmp085ReadInt(0xB4);
  b1 = bmp085ReadInt(0xB6);
  b2 = bmp085ReadInt(0xB8);
  mb = bmp085ReadInt(0xBA);
  mc = bmp085ReadInt(0xBC);
  md = bmp085ReadInt(0xBE);
  initializeBaro();
}*/

void measureBaro() {
  measureBaroSum();
}

void measureGroundBaro() {
  // measure initial ground pressure (multiple samples)
  float altSum = 0.0;
  for (int i=0; i < 50; i++) {
    measureBaro();
        altSum += baroRawAltitude;
    delay(12);
  }
  baroGroundAltitude = altSum / 50;
}


float bmp085GetTemperature(unsigned int ut)
{
c5 = 0.00625*pow(2,-15)*ac5;
c6 = ac6;
Mc = pow(2,11)*0.00625*0.00625*mc;
Md = 0.00625*md;

float temp;
temp = c5*(ut-c6);
return (temp + (Mc/(temp+Md)));

}

float bmp085GetPressure(unsigned long up)
{
tempdiff = temperature - 25;
x = x2*tempdiff*tempdiff+x1*tempdiff+x0;
y = y2*tempdiff*tempdiff+y1*tempdiff+y0;

z = (up-x)/y;
//Serial.print(" Pressure = ");Serial.println( p02*z*z+p01*z+p00 );
return p02*z*z+p01*z+p00;
}


// Read 2 bytes from the BMP085
// First byte will be from 'address'
// Second byte will be from 'address'+1
int bmp085ReadInt(unsigned char address)
{
 // Serial.println(" Reading ");
  unsigned char msb, lsb;
  
  Wire.beginTransmission(BMP085_ADDRESS);
  Wire.write(address);
  Wire.endTransmission();
  
  Wire.requestFrom(BMP085_ADDRESS, 2);
  while(Wire.available()<2)
    ;
  msb = Wire.read();
  lsb = Wire.read();
 

  return (int) msb<<8 | lsb;
  }

// Read the uncompensated temperature value
unsigned int bmp085ReadUT()
{
  unsigned int ut;
  
  // Write 0x2E into Register 0xF4
  // This requests a temperature reading
  Wire.beginTransmission(BMP085_ADDRESS);
  Wire.write(0xF4);
  Wire.write(0x2E);
  Wire.endTransmission();
  
  // Wait at least 4.5ms
  delay(5);
  
  // Read two bytes from registers 0xF6 and 0xF7
  ut = bmp085ReadInt(0xF6);
  return ut;
}

// Read the uncompensated pressure value
unsigned long bmp085ReadUP()
{
  unsigned char msb, lsb, xlsb;
  unsigned long up = 0;
  
  // Write 0x34+(OSS<<6) into register 0xF4
  // Request a pressure reading w/ oversampling setting
  Wire.beginTransmission(BMP085_ADDRESS);
  Wire.write(0xF4);
  Wire.write(0x34 + (OSS<<6));
  Wire.endTransmission();
  
  // Wait for conversion, delay time dependent on OSS
  delay(2 + (3<<OSS));
  
  // Read register 0xF6 (MSB), 0xF7 (LSB), and 0xF8 (XLSB)
  Wire.beginTransmission(BMP085_ADDRESS);
  Wire.write(0xF6);
  Wire.endTransmission();
  Wire.requestFrom(BMP085_ADDRESS, 3);
  
  // Wait for data to become available
  while(Wire.available() < 3)
    ;
  msb = Wire.read();
  lsb = Wire.read();
  xlsb = Wire.read();
  
  up = (((unsigned long) msb << 16) | ((unsigned long) lsb << 8) | (unsigned long) xlsb) >> (8-OSS);
  
  return up;
}

void measureBaroSum() {
  // switch between pressure and temperature measurements
  // each loop, since it is slow to measure pressure
  if (isReadPressure) {
    rawPressureSum += bmp085ReadUP();
    rawPressureSumCount++;
    if (pressureCount == 2) {
      
      pressureCount = 0;
      isReadPressure = false;
    } 
    pressureCount++;
  } 
  else { // select must equal TEMPERATURE
        rawTemperature = (long)bmp085ReadUT();
        temperature=bmp085GetTemperature(rawTemperature);
        evaluateBaroAltitude(); 

    isReadPressure = true;
  }
}

void evaluateBaroAltitude() {
if (rawPressureSumCount == 0) { // it may occur at init time that no pressure has been read yet!
    return;
  }
  rawPressure = rawPressureSum / rawPressureSumCount;
  rawPressureSum = 0.0;
  rawPressureSumCount = 0;
  pressure=bmp085GetPressure(rawPressure);
  baroRawAltitude = 44330 * (1 - pow((pressure/1013.250), pressureFactor));
  //Serial.print(" baroRawAltitude = ");Serial.println((float)baroRawAltitude);
  baroAltitude = filterSmooth(baroRawAltitude, baroAltitude, baroSmoothFactor);
}

const float getBaroAltitude() {
  return (baroAltitude- baroGroundAltitude);
}

float filterSmooth(float currentData, float previousData, float smoothFactor) 
{
  if (smoothFactor != 1.0) //only apply time compensated filter if smoothFactor is applied
  {
    return (previousData * (1.0 - smoothFactor) + (currentData * smoothFactor)); 
  }
  return currentData; //if smoothFactor == 1.0, do not calculate, just bypass!
}



void setup()
{
  Serial.begin(115200);
  Serial.println("Barometric sensor library test (BMP085)");
  Wire.begin();
 // bmp085Calibration();
  initializeBaro();
}
  
  


void loop()
{
  
 /* measureBaro();
  temperature = bmp085GetTemperature(rawTemperature);
  pressure = bmp085GetPressure(rawPressure);*/
  
 // if((millis() - timer) > 50) // 20Hz
 // {
 //   timer = millis();
    measureBaro();

    Serial.print("altitude : ");
    Serial.print(getBaroAltitude());
    Serial.println();
  /*Serial.print("Temperature: ");
  Serial.print(temperature, DEC);
  Serial.println(" *0.1 deg C");
  Serial.print("Pressure: ");
  Serial.print(pressure, DEC);
  Serial.println(" Pa");*/
//}
 /* Serial.print("Altitude: ");
  Serial.print(baroRawAltitude, 2);
  Serial.println(" m");
  Serial.println();
  
  delay(1000);*/
}
